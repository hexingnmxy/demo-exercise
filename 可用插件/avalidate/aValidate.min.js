/*
 * aValidate
 * Copyright 2015 aiv367
 * author : aiv367 <aiv367@qq.com>
 * version : 1.0 (2015/05/06)
 * depend : jquery or zepto
 * css : skin/aValidate.css
 */

;
(function ($) {

    'use strict';
    $.fn.aValidate = function (options) {

        if (this.length == 0) {
            return this;
        }
        else if (this.length > 1) {
            this.each(function () {
                $(this).aValidate(options);
            });
            return this;
        }

        function Plugin($fn, options) {
            var that = this;
            this._setOptions($fn, options);
            this._setElement($fn);
            this._setEvent();

            if (this.options.doit) {
                setTimeout(function () {
                    that._validate();
                    if (!that.options.outputDoitShow) {
                        that._outputView(false);
                    }
                }, this.options.delay);
            }
            ;
        }

        Plugin.prototype = {

            defaults: {

                empty: false,				//是否允许空值
                regexp: null,				//正则表达式验证
                strings: null,				//允许包含的字符串 如'12345abcde'或者 1-9a-bA-Z 如要包含-,输入\-
                maxLength: null,				//最大长度
                minLength: null,				//最小长度
                maxValue: null,				//最大数值
                minValue: null,				//最小数字
                type: null,					//类型验证 email,phone,tel,cn,usename,ip,url,number,cnid,date
                dateFormat: null,			//type = date类型，日期格式化。如 'y/m/d h:i:s'
                doit: true,					//是否立即执行校验
                //delay:300,					//校验事件延迟时间
                delay: 10,					//校验事件延迟时间
                ajaxVar: null,				//异步校验时传给服务端的变量值,如为null,使用输入组件的name值
                ajaxMethod: 'post',			//
                ajaxUrl: null,				//

                outputId: null,
                outputOffset: 10,
                outputClassName: '',
                outputDoitShow: false,		//执行doit时，是否显示tooltip提示
                outputBlurShow: false,		//输入组件失去焦点时，是否显示tooltip
                outputDirection: 'right',	//tootltip出现方向 [top,right,bottom,left]

                errorText: null,
                errorTextGroup: null,
                errorTextAjax: null,

                //event
                onValidate: $.noop,			//验证后触发的事件 result:true:false，resutl_string,this_obj
                onAjaxBefore: $.noop,		//ajax前事件 用于异步自定义传值。 function(val){}; val:输入框的值。函数 return一个json数据作为ajax的发起参数
                onAjaxAfter: $.noop			//ajax返回事件 用于处理异步回调结果。function(result){}; result:服务端传递回来的字符串，函数return true 验证正确，return false 验证失败

            },

            //用户配置
            options: {},

            //$对象
            $: {},

            _t: null,
            _ajax: null,
            _val: '',
            _result: 0,

            _setOptions: function ($fn, options) {

                var attrOptions = $fn.attr('data-plugin-options');
                if (attrOptions) {
                    attrOptions = eval('(' + attrOptions + ')');
                    if (attrOptions.aValidate) {
                        attrOptions = attrOptions.aValidate;
                    }
                }

                this.options = attrOptions ? $.extend({}, this.defaults, attrOptions) : this.defaults;
                this.options = $.extend({}, this.options, options);
            },

            _setElement: function ($fn) {

                var options = this.options;
                this.$.fn = $fn;

                if (options.outputId) {
                    this.$.output = $('#' + options.outputId);
                }
                else {
                    this.$.output = $('<div class="aValidate-result-container ' + (options.outputClassName ? options.outputClassName : '') + '"></div>');
                    $fn.after(this.$.output);
                }
            },

            _setEvent: function () {

                var that = this;
                var $fn = this.$.fn;

                if (!$fn.attr('data-validate-event')) {

                    this._val = $fn.val();


                    $fn.attr('data-validate-event', 1);

                    if ($fn[0].tagName === 'SELECT') {
                        $fn.on('change', function () {

                            that._validate();
                            that._val = this.value;

                        });
                    }
                    else {
                        $fn.on('input', function () {



                            clearTimeout(that._t);
                            that._t = setTimeout(function () {
                                that._validate();
                            }, that.options.delay);
                            that._val = this.value;

                        }).on('focus', function () {

                            if (that._result <= 0) {
                                that._outputView(true);
                            }
                        })
                            .on('blur', function () {

                                if(!options.empty){

                                    if (this.value == '' && that._val == '') {

                                        clearTimeout(that._t);
                                        that._validate();
                                    }
                                }
                                if(options.empty){

                                        clearTimeout(that._t);
                                        that._validate();

                                }

                                if (this.value != that._val) {

                                    clearTimeout(that._t);
                                    that._validate();
                                }

                                if (!that.options.outputBlurShow) {

                                    that._outputView(false);
                                }

                            });
                    }

                }
            },

            //校验
            _validate: function () {


                var that = this;
                var $fn = this.$.fn;
                var options = this.options;

                //空值校验
                if (options.empty && $fn.val() === '') {
                    this._result = 1;
                    this._output();
                    return;
                }

                //基础验证
                if (this._validateBase()) {

                    this._result = 1;
                }
                else {
                    this._result = 0;
                    this._output();
                    return false;
                }

                //模板验证
                if (options.type) {
                    if (this._validateType()) {
                        this._result = 1;
                    }
                    else {
                        this._result = 0;
                        this._output();
                        return false;
                    }
                }

                //Ajax验证
                if (options.ajaxUrl != null) {
                    this._result = -1;
                    if (this._ajax) this._ajax.abort();

                    var params = options.onAjaxBefore($fn.val());

                    if (params == undefined) {
                        params = eval('({' + (options.ajaxVar || $fn.attr('name')) + ':' + $fn.val() + '})');
                    }

                    this._ajax = $.ajax({
                        type: options.ajaxMethod,
                        url: options.ajaxUrl,
                        data: params,
                        success: function (result) {

                            //调用自定义回到函数
                            var callback = options.onAjaxAfter(result);
                            if (callback == undefined) {
                                //默认返回值判断方法
                                result = $.trim(result);
                                if (result === '1' || result === 'true') {
                                    that._result = 2;
                                }
                                else {
                                    that._result = -2;
                                }
                            }
                            else if (callback) {
                                that._result = 2;
                            }
                            else {
                                that._result = -2;
                            }
                            that._output();

                        }
                    });
                    this._output();
                    return;
                }

                this._output();
            },

            //基础校验
            _validateBase: function () {

                var val = this.$.fn.val();
                var options = this.options;
                if (!options.empty && val === '') return false;//空值验证
                if (options.regexp != null && eval('val.search(' + options.regexp + ')') == -1) return false;//正则验证
                if (options.strings != null && eval('val.search("^[' + options.strings + ']+$");') == -1)  return false;//包含字符集验证
                if (options.minLength != null && val.length < parseInt(options.minLength)) return false;//最小长度验证
                if (options.maxLength != null && val.length > parseInt(options.maxLength)) return false;//最大长度验证
                if (options.minValue != null && parseFloat(val) < parseFloat(options.minValue)) return false;//最小值验证
                if (options.maxValue != null && parseFloat(val) > parseFloat(options.maxValue)) return false;//最大值验证

                return true;
            },

            //通用类型校验
            _validateType: function () {

                var val = this.$.fn.val();
                var options = this.options;

                // if(options.empty && val=='') return true;//空值验证
                switch (options.type) {
                    case 'email':
                        if (val.search(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/) == -1) return false;
                        break;
                    case 'cn':
                        if (val.search(/^[\u4e00-\u9fa5]*$/) == -1) return false;
                        break;
                    case 'username':
                        if (val.search(/^[0-9a-zA-Z\-_]+$/) == -1) return false;
                        break;
                    case 'ip':
                        if (val.search(/^(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))$/) == -1) return false;
                        break;
                    case 'url':
                        var strRegex = "^((https|http|ftp|rtsp|mms)://)"
                            + "(([0-9a-zA-Z_!~*'().&=+$%-]+: )?[0-9a-zA-Z_!~*'().&=+$%-]+@)?" //ftp的user@
                            + "(([0-9]{1,3}\.){3}[0-9]{1,3}" // IP形式的URL- 199.194.52.184
                            + "|" // 允许IP和DOMAIN（域名）
                            + "([0-9a-zA-Z_!~*'()-]+\.)*" // 域名- www.
                            + "([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z]\." // 二级域名
                            + "[a-zA-Z]{2,6})" // first level domain- .com or .museum
                            + "(:[0-9]{1,4})?" // 端口- :80
                            + "((/?)|"
                            + "(/[0-9a-zA-Z_!~*'().;?:@&=+$,%#-]+)+/?)$";
                        if (val.search(strRegex) == -1) return false;
                        break;
                    case 'number':
                        if (val.search(/^[0-9.]+$/) == -1) return false;
                        break;
                    case 'cnid':
                        if (val.search(/^([1-9][\d]{5}([1][9]\d{2}|[2][0][1][0-3]|[2][0][0][0-9])(([0][2](([0][1-9])|([1-2][0-9])))|((([0][4,6,9])|([1][1]))(([0][1-9])|([1-2][0-9])|([3][0])))|(([0][1,3,5,7,8]|([1][0])|([1][2]))(([0][1-9])|([1-2][0-9])|([3][0-1]))))[0-9]{3}[\dxX])$/) == -1) return false;
                        break;
                    case 'phone':
                        if (val.search(/^1[3-9]\d{9}$/) == -1) return false;
                        break;
                    case 'date':
                        var format = options.dateFormat;
                        var strRegex_y = "([1-9][0-9]{3})";
                        var strRegex_m = "(([1-9])|(0[1-9])|(1[0-2]))";
                        var strRegex_d = "(([1-9])|(0[1-9])|(1[0-9])|(2[0-9])|(3[01]))";
                        var strRegex_h = "(([0-9])|(0[0-9])|(1[0-9])|(2[0-3]))";
                        var strRegex_i = "(([0-9])|(0[0-9])|(1[0-9])|(2[0-9])|(3[0-9])|(4[0-9])|(5[0-9]))";
                        var strRegex_s = "(([0-9])|(0[0-9])|(1[0-9])|(2[0-9])|(3[0-9])|(4[0-9])|(5[0-9]))";

                        if (format != null) {
                            var strRegex = "^" + format + "$";
                            strRegex = strRegex.replace('y', strRegex_y);
                            strRegex = strRegex.replace('m', strRegex_m);
                            strRegex = strRegex.replace('d', strRegex_d);
                            strRegex = strRegex.replace('h', strRegex_h);
                            strRegex = strRegex.replace('i', strRegex_i);
                            strRegex = strRegex.replace('s', strRegex_s);
                        }
                        else {
                            var strRegex = "^";
                            strRegex += "(" + strRegex_y + "[-/]" + strRegex_m + "[-/]" + strRegex_d + ")";
                            strRegex += "( " + strRegex_h + ":" + strRegex_i + "(:" + strRegex_s + ")?)?";
                            strRegex += "$";
                        }
                        if (val.search(strRegex) == -1) return false;
                        break;
                }
                return true;
            },

            //校验结果输出
            _output: function () {

                var $fn = this.$.fn;
                var $icon = $fn.parent().next();
                var $fntput = this.$.output;
                var options = this.options;


                //console.log('==$icon  是否可用 ='+ ($icon == null || $icon == undefined));
                //$fn.removeClass('validate-loading validate-success validate-error validate-empty');

                if ($icon == null || $icon == undefined) { //  找不到单独的图标来展示
                    $fn.removeClass('validate-loading validate-success validate-error validate-empty');
                } else {
                    $icon.removeClass('validate-loading icon-ok-sign icon-exclamation-sign validate-empty hide');
                }


                $fn.attr('data-validate-result', this._result);
                switch (this._result) {
                    case -3://联合校验错误

                        //$fn.addClass('validate-error');

                        if ($icon == null || $icon == undefined) { //  找不到单独的图标来展示
                            $fn.addClass('validate-error');
                        } else {
                            $icon.addClass('icon-exclamation-sign');
                        }
                        if (options.errorTextGroup) {
                            this._outputView(true, '<span class="aValidate-result">' + options.errorTextGroup + '</span>');
                        }
                        options.onValidate(false, 'groupError', this);
                        break;

                    case -2://Ajax校验错误

                        //$fn.addClass('validate-error');
                        if ($icon == null || $icon == undefined) { //  找不到单独的图标来展示
                            $fn.addClass('validate-error');
                        } else {
                            $icon.addClass('icon-exclamation-sign');
                        }

                        if (options.errorTextAjax) {
                            this._outputView(true, '<span class="aValidate-result">' + options.errorTextAjax + '</span>');
                        }
                        options.onValidate(false, 'ajaxError', this);
                        break;

                    case -1://Ajaxing


                        //	$fn.addClass('validate-loading')

                        if ($icon == null || $icon == undefined) { //  找不到单独的图标来展示
                            $fn.addClass('validate-loading')
                        } else {
                            $icon.addClass('validate-loading');
                        }

                        this._outputView(false);
                        break;

                    case 0://校验错误

                        // 	(!options.empty && $fn.val()==='') ? $fn.addClass('validate-empty') : $fn.addClass('validate-error');
                        if ($icon == null || $icon == undefined) { //  找不到单独的图标来展示
                            (!options.empty && $fn.val() === '') ? $fn.addClass('validate-empty') : $fn.addClass('validate-error');
                        } else {
                            (!options.empty && $fn.val() === '') ? $icon.addClass('validate-empty') : $icon.addClass('icon-exclamation-sign');
                        }


                        if (options.errorText) {
                            this._outputView(true, '<span class="aValidate-result">' + options.errorText + '</span>');
                        }
                        options.onValidate(false, 'error', this);
                        break;

                    case 1://校验正确
                        //$fn.addClass('validate-success');
                        if ($icon == null || $icon == undefined) { //  找不到单独的图标来展示
                            //console.log('-----校验正确 -图标来展示---') ;
                            $fn.addClass('validate-success');
                        } else {
                            if(options.empty && $fn.val()===''){
                                $icon.removeClass('icon-ok-sign');
                            }else{
                                $icon.addClass('icon-ok-sign');
                            }

                        }


                        this._outputView(false);
                        options.onValidate(true, 'success', this);
                        break;

                    case 2://Ajax 成功

                         //$fn.addClass('validate-success');
                        if ($icon == null || $icon == undefined) { //  找不到单独的图标来展示
                            $fn.addClass('validate-success');
                        } else {
                            $icon.addClass('icon-ok-sign');
                        }


                        this._outputView(false);
                        options.onValidate(true, 'ajaxSuccess', this);
                        break;
                }
            },

            //显示隐藏提示内容 display = true 显示
            _outputView: function (display, text) {

                var $fn = this.$.fn;
                var $fntput = this.$.output;
                var options = this.options;

                if (display) {
                    var offset = $fn.position();
                    var css = {};
                    if (!!text) {
                        $fntput.html(text);
                    }
                    if ($.trim($fntput.html()) === '') return false;//没有内容不显示

                    $fntput.children('.aValidate-result').addClass('aValidate-result-show');

                    if (!options.outputId) {
                        switch (options.outputDirection) {
                            case 'top':
                                css = {
                                    left: offset.left,
                                    top: offset.top - ($fntput.innerHeight() || $fntput.height()) - options.outputOffset
                                };
                                break;
                            case 'bottom':
                                css = {
                                    left: offset.left,
                                    top: offset.top + ($fn.innerHeight() || $fn.height()) + options.outputOffset
                                };
                                break;
                            case 'right':
                                css = {
                                    left: offset.left + ($fn.innerWidth() || $fn.width()) + options.outputOffset,
                                    top: offset.top
                                };
                                break;
                            case 'left':
                                css = {
                                    left: offset.left - ($fntput.innerWidth() || $fntput.width()) - options.outputOffset,
                                    top: offset.top
                                };
                                break;
                        }
                    }
                    $fntput.css(css);
                }
                else {
                    $fntput.children('.aValidate-result').removeClass('aValidate-result-show');
                }
            }

        };

        this.Plugin = new Plugin($(this), options);
        return this;


    };

    $.fn.aValidateCheck = function () {

        var result = true
        $(this).each(function (i, dom) {
            if (parseInt($(dom).attr('data-validate-result')) < 1) {
                result = false;
                return;
            }
        });
        return result;
    };

    $.fn.aValidateFormCheck = function () {
        return $(this).find('input[data-validate-result],select[data-validate-result]').aValidateCheck();
    };

    //联合验证
    /*
     options = {
     obj1 : $inputPaswd1,
     obj1ErrorText : '',
     obj2 : $inputPaswd2,
     obj2ErrorText : '',
     comp : '=='
     };
     */
    $.aValidateGroup = function (options) {

        var obj1 = options.obj1;
        var obj2 = options.obj2;
        var comp = options.comp;


        if (!obj1.length || !obj2.length || comp == null || !(' |==|>|>=|<|<=|!=|'.indexOf('|' + comp + '|'))) {
            return false;
        }

        obj1.Plugin.options.errorTextGroup = options.obj1ErrorText;
        obj2.Plugin.options.errorTextGroup = options.obj2ErrorText;

        var fun = function (obj) {

            setTimeout(function () {

                var result1 = obj1.Plugin._result;
                var result2 = obj2.Plugin._result;

                if ((result1 > 0 && result2 > 0) || result1 == -3 || result2 == -3) //-3 联合验证错误
                {
                    var val1 = obj1.val();
                    var val2 = obj2.val();

                    if (val1 == parseFloat(val1)) val1 = parseFloat(val1);
                    if (val2 == parseFloat(val2)) val2 = parseFloat(val2);

                    if (eval('(val1' + comp + 'val2)')) {
                        obj.Plugin._result = 1;
                    }
                    else {
                        obj.Plugin._result = -3;
                    }

                    obj.Plugin._output();

                }
            }, obj.Plugin.options.delay + 10);
        };

        obj1.on('input', function () {
            fun(obj1);
        });

        obj2.on('input', function () {
            fun(obj2);
        });
    };

    //自动实例化
    $(function () {

        $('[data-plugin*="aValidate"]').aValidate();

    });

})(window.jQuery || window.Zepto);